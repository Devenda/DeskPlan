@page "/rooms"

@using Components

@inject DeskPlan.Data.Services.RoomService _roomService

<h3>Room</h3>

<button class="btn btn-primary" @onclick="Add">
    Add
</button>

@if (isAdd || isEdit)
{
    <EditForm Model="@room" OnValidSubmit="@AddRoom">
        <div class="modal fade show" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Room</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>

                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="Name">Name</label>
                            <InputText @bind-Value=room.Name class="form-control" id="Name" />
                        </div>
                        <div class="form-group">
                            <label for="Age">Number of desks</label>
                            <InputNumber @bind-Value=room.MaxDesks class="form-control" id="MaxDesks" />
                        </div>
                    </div>

                    <div class="modal-footer">
                        <input type="submit" class="btn btn-primary" value="Save" />
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    </EditForm>
}

@if (isDelete)
{
    <div class="modal fade show" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Room?</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    <p>Delete Room @room?.Name?</p>
                </div>

                <div class="modal-footer">
                    <input type="submit" class="btn btn-danger" value="Confirm" @onclick="@(async () => await DeleteRoom(@room.RoomId, true))" />
                    <input type="submit" class="btn btn-primary" value="Cancel" @onclick="CloseModal" />
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@if (rooms == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Max Desks</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var room in rooms)
            {
                @if (room != null)
                {
                    <tr>
                        <td>@room.Name</td>
                        <td>@room.MaxDesks</td>
                        <td>
                            <button class="btn btn-default" @onclick="@(async () => await EditRoom(@room.RoomId))">Edit</button>
                            <button class="btn btn-danger" @onclick="@(async () => await DeleteRoom(@room.RoomId, false))">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    //Model
    private Models.Room? room = new Models.Room();
    private List<Models.Room?> rooms = new List<Models.Room?>();

    //Control
    private bool isAdd = false;
    private bool isEdit = false;
    private bool isDelete = false;

    //Error handling
    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; } = null!;

    #region UI Control
    private void Add()
    {
        isAdd = true;
    }

    private void CloseModal()
    {
        isAdd = false;
        isEdit = false;
    }
    #endregion

    #region display
    protected override async Task OnInitializedAsync()
    {
        await RefreshRooms();
    }

    private async Task RefreshRooms()
    {
        rooms = await _roomService.GetAllRooms();
    }
    #endregion

    #region CRUD
    private async void AddRoom()
    {
        try
        {
            if (room != null)
            {
                if (isAdd) await _roomService.InsertRoomAsync(room);
                if (isEdit) await _roomService.UpdateRoomAsync(room);
            }

            isEdit = isAdd = false;
            await RefreshRooms();
        }
        catch (Exception e)
        {
            CloseModal();
            ErrorComponent.ShowError(e.Message, e.StackTrace ?? "Please reload");
        }
    }

    protected async Task EditRoom(int roomId)
    {
        room = await _roomService.GetByIdAsync(roomId);

        isEdit = true;
    }

    protected async Task DeleteRoom(int roomId, bool confirmed)
    {
        room = await _roomService.GetByIdAsync(roomId);

        if (!confirmed) isDelete = true;
        else isDelete = false;

        if (room != null && confirmed) await _roomService.DeleteRoomAsync(room);

        await RefreshRooms();
    }

    #endregion
}
