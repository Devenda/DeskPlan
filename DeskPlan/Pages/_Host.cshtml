@page "/"
@namespace DeskPlan.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DeskPlan</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />

    <link rel="stylesheet" href="_content/Radzen.Blazor/css/default-base.css">
</head>
<body>
    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" />
    </app>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        // needed to catch escape keypress
        document.onkeydown = (e) => {
            DotNet.invokeMethodAsync('DeskPlan', 'KeyDownCaller', e.key);
        }
        window.drawChart = (data) => {
            google.charts.load('current', { 'packages': ['timeline'] });
            google.charts.setOnLoadCallback(drawTimelineChart);

            function drawTimelineChart() {
                var container = document.getElementById('planning');
                var chart = new google.visualization.Timeline(container);

                // Listen for select event
                google.visualization.events.addListener(chart, 'select', function () {
                    var selection = chart.getSelection();
                    DotNet.invokeMethodAsync('DeskPlan', 'RowSelectedCaller', selection[0].row);
                });

                var dataTable = new google.visualization.DataTable();

                dataTable.addColumn({ type: 'string', id: 'Desk' });
                dataTable.addColumn({ type: 'string', id: 'User' });
                dataTable.addColumn({ type: 'date', id: 'From' });
                dataTable.addColumn({ type: 'date', id: 'Till' });

                for (var i = 0; i < data.length; i++) {
                    var desk = data[i].desk.name;
                    var name = data[i].user.firstName + ' ' + data[i].user.lastName;
                    var start = new Date(data[i].startDate);
                    var end = new Date(data[i].endDate);

                    dataTable.addRow([desk, name, start, end]);
                }

                drawChart(false);

                window.addEventListener('resize', drawChart, false);

                function drawChart() {
                    chart.draw(dataTable);
                }
            }
        }
    </script>
</body>
</html>