@page "/planning"

@using System.Collections

@using Radzen
@using Radzen.Blazor

@inject IJSRuntime JsRuntime

@inject DeskPlan.Data.Services.PlanningService _planningService
@inject DeskPlan.Data.Services.RoomService _roomService
@inject DeskPlan.Data.Services.DeskService _deskService
@inject DeskPlan.Data.Services.UserService _userService


<div class="container-fluid" style="height: 100vh;">
    <EditForm Model="@planning" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <CustomValidator @ref="customValidator" />
        <div class="row pt-2">
            <div class="col-3 pl-0">
                <label>Room</label>
            </div>

            <div class="col-2">
                <label>Desk</label>
            </div>

            <div class="col-2">
                <label>User</label>
            </div>

            <div class="col-2">
                <label>Start Week</label>
            </div>

            <div class="col-2">
                <label>End Week</label>
            </div>

            <div class="col-1">
                <label></label>
            </div>
        </div>
        <div class="row">
            <div class="col-3 pl-0">
                <div class="form-group">
                    <select @bind="RoomId" class="form-control" id="Room">
                        @if (rooms != null)
                        {
                            foreach (Models.Room room in rooms)
                            {
                                <option value="@room.RoomId">@room.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="col-2">
                <div class="form-group">
                    <select @bind="planning.DeskId" class="form-control" id="Desk">
                        @if (desks != null)
                        {
                            foreach (Models.Desk desk in desks)
                            {
                                <option value="@desk.DeskId">@desk.Name</option>
                            }
                        }
                    </select>
                    <ValidationMessage For="@(() => planning.DeskId)" />
                </div>
            </div>

            <div class="col-2">
                <div class="form-group">
                    <select @bind=planning.UserId class="form-control" id="User">
                        @if (users != null)
                        {
                            foreach (Models.User user in users)
                            {
                                <option value="@user.UserId">@(user.FirstName + " " + user.LastName) </option>
                            }
                        }
                    </select>
                    <ValidationMessage For="@(() => planning.UserId)" />
                </div>
            </div>

            <div class="col-2">
                <div class="form-group">
                    <InputDate type="week" @bind-Value=planning.StartDate class="form-control" id="StartDate" />
                    <ValidationMessage For="@(() => planning.StartDate)" />
                </div>
            </div>

            <div class="col-2">
                <div class="form-group">
                    <InputDate type="week" @bind-Value=planning.EndDate class="form-control" id="EndDate" />
                    <ValidationMessage For="@(() => planning.EndDate)" />
                </div>
            </div>

            <div class="col">
                <div class="row">
                    <div class="col pl-0">
                        <input type="submit" class="btn btn-primary" value=@(isEdit ? "Edit" : "Save") />
                    </div>

                    @if (isEdit)
                    {
                        <div class="col pl-1">
                            <button class="btn btn-danger" @onclick="@(async () => isDelete = true)">Delete</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </EditForm>

    <div class="row">
        <RadzenSlider Range="true" Min="0" Max="planningMax" TValue="IEnumerable<int>" Change="@((args) => Change(args))" Style="width: 100%" />
        <div class="col">@(DateTime.Now.AddDays(planningSelectedMin).ToString("dd MMM yyyy"))</div>
        <div class="col text-right">@(DateTime.Now.AddDays(planningSelectedMax).ToString("dd MMM yyyy"))</div>
    </div>

    @* chart js code can be found in _Host.cshtml *@
    <div class="row pt-2" style="height: calc(100% - 140px); " id="planning">
        <div class="col" id="planning" />
    </div>
</div>


@code {
    private CustomValidator customValidator;

    private int planningMax;
    private int planningSelectedMin;
    private int planningSelectedMax;

    private int previousRow;

    //Model
    private int roomId;
    public int RoomId
    {
        get { return roomId; }
        set
        {
            roomId = value;

            RefreshDesks(roomId);
            if (desks != null && desks.Any())
            {
                planning.DeskId = desks.FirstOrDefault().DeskId;
            }
        }
    }

    private Models.Planning? planning = new Models.Planning();
    private List<Models.Planning?> plannings = new List<Models.Planning?>();

    private List<Models.Room> rooms = new List<Models.Room>();
    private List<Models.Desk> desks = new List<Models.Desk>();
    private List<Models.User> users = new List<Models.User>();

    //Display
    private bool isEdit;
    private bool isDelete;

    //Event helpers
    private static Action<int> rowSelectedAction;
    private static Action<string> keyDownAction;

    //Error handling
    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; } = null!;

    #region display
    protected override async Task OnInitializedAsync()
    {
        await RefreshRooms();
        await RefreshUsers();

        InitPlanning();

        rowSelectedAction = RowSelected;
        keyDownAction = KeyDown;

        var plannings = await _planningService.GetAllPlanningsAsync();
        planningSelectedMax = planningMax = (plannings.Max(p => p.EndDate) - DateTime.Now)?.Days ?? 100;//TODO: better end time when none can be found?
    }

    //Needed for the first render when opening the page
    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first) await RefreshPlannings(null, null);
    }

    private async Task Change(IEnumerable<int> values)
    {
        var vals = values.ToArray();
        planningSelectedMin = vals[0];
        planningSelectedMax = vals[1];

        await RefreshPlannings(DateTime.Now.AddDays(planningSelectedMin), DateTime.Now.AddDays(planningSelectedMax));
    }

    private void InitPlanning()
    {
        planning = new Models.Planning();

        planning.StartDate = DateTime.Now;
        planning.EndDate = DateTime.Now.AddDays(7);
    }

    private async Task RefreshPlannings(DateTime? startDate, DateTime? endDate)
    {
        plannings = await _planningService.GetPlanningsActiveBetweenAsync(startDate ?? DateTime.Now, endDate ?? DateTime.Now.AddDays(365));

        // Draw chart
        await JsRuntime.InvokeAsync<Task>("drawChart", plannings);
    }

    //TODO: Move all ordering to service?
    private async Task RefreshRooms()
    {
        rooms = (await _roomService.GetAllRooms()).OrderBy(r => r.Name)
                                                  .ToList();
    }

    private async Task RefreshDesks(int roomId)
    {
        desks = (await _deskService.GetAllDesksForRoomAsync(roomId)).OrderBy(d => d.Name)
                                                                    .ToList();
    }

    private async Task RefreshUsers()
    {
        users = (await _userService.GetAllUsersAsync()).OrderBy(u => (u.FirstName + " " + u.LastName))
                                                       .ToList();
    }

    private async Task SetEdit(Models.Planning pln)
    {
        planning = await _planningService.GetByIdAsync(pln.PlanningId);
        RoomId = planning.Desk.RoomId;

        isEdit = true;

        StateHasChanged();
    }

    private void SetAdd()
    {
        InitPlanning();

        isEdit = false;

        StateHasChanged();
    }
    #endregion

    #region CRUD
    private async void HandleValidSubmit()
    {
        customValidator.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        if (planning.DeskId == 0)
        {
            errors.Add(nameof(planning.DeskId),
                new List<string>() { "Desk is required." });
        }

        if (planning.UserId == 0)
        {
            errors.Add(nameof(planning.UserId),
                new List<string>() { "User is required." });
        }

        if (errors.Count() > 0)
        {
            customValidator.DisplayErrors(errors);
        }
        else
        {
            if (isEdit)
            {
                if (isDelete)
                {
                    await DeletePlanning();
                    isDelete = false;
                }
                else
                {
                    await UpdatePlanning();
                }

                isEdit = false;
                InitPlanning();
            }
            else
            {
                await AddPlanning();
            }

            StateHasChanged();
        }
    }

    private async Task UpdatePlanning()
    {
        try
        {
            await _planningService.UpdatePlanningAsync(planning);

            await RefreshPlannings(DateTime.Now.AddDays(planningSelectedMin), DateTime.Now.AddDays(planningSelectedMax));
        }
        catch (Exception e)
        {
            ErrorComponent.ShowError(e.Message, e.StackTrace ?? "Please reload");
        }
    }

    private async Task AddPlanning()
    {
        try
        {
            await _planningService.InsertPlanningAsync(planning);

            await RefreshPlannings(DateTime.Now.AddDays(planningSelectedMin), DateTime.Now.AddDays(planningSelectedMax));
        }
        catch (Exception e)
        {
            ErrorComponent.ShowError(e.Message, e.StackTrace ?? "Please reload");
        }
    }

    private async Task DeletePlanning()
    {
        try
        {
            await _planningService.DeletePlanningAsync(planning);

            await RefreshPlannings(DateTime.Now.AddDays(planningSelectedMin), DateTime.Now.AddDays(planningSelectedMax));
        }
        catch (Exception e)
        {
            ErrorComponent.ShowError(e.Message, e.StackTrace ?? "Please reload");
        }
    }
    #endregion

    #region event handlers
    [JSInvokable]
    public static void RowSelectedCaller(int row)
    {
        rowSelectedAction.Invoke(row);
    }

    private async void RowSelected(int row)
    {
        previousRow = row;
        await SetEdit(plannings[row]);
    }

    [JSInvokable]
    public static void KeyDownCaller(string key)
    {
        keyDownAction.Invoke(key);
    }

    protected void KeyDown(string key)
    {
        if (key == "Escape")
        {
            // TODO set focus to something else
            SetAdd();
        }
    }
    #endregion
}
