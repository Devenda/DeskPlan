@page "/users"

@using ElectronNET.API
@using ElectronNET.API.Entities 

@inject DeskPlan.Data.Services.UserService UserService
@inject DeskPlan.Tools.UserImport _userImport

<h3>Users</h3>
<button class="btn btn-primary" @onclick="UpdateRecord">
    Update Record
</button>

<button class="btn btn-primary" @onclick="Refresh">
    Refresh
</button>

<button class="btn btn-primary" @onclick="FileUpload">
    Upload
</button>

@*<button onclick="document.getElementById('file-input').click();">Open</button>*@
@*<input id="file-input" type="file" name="name" style="display: none;" @onchange="FileUpload" />*@
@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Started</th>
                <th>Contract end</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.EmailAddress</td>
                    <td>@user.StartDate?.ToString("dd/MM/yyyy")</td>
                    <td>@user.EndDate?.ToString("dd/MM/yyyy")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DeskPlan.Data.Models.User> users;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAllUsers();
    }

    private async void UpdateRecord(MouseEventArgs e)
    {
        await UserService.UpsertUserAsync(new Core.Entities.User
        {
            Number = "1",
            FirstName = "Tinus",
            LastName = "Scheppers",
            EmailAddress = (new Random()).Next(999).ToString()
        });

        users = await UserService.GetAllUsers();
    }

    private async void Refresh(MouseEventArgs e)
    {
        users = await UserService.GetAllUsers();
    }

    private async void FileUpload(MouseEventArgs e)
    {
        var mainWindow = Electron.WindowManager.BrowserWindows.First();
        var options = new OpenDialogOptions
        {
            DefaultPath = "C:/",
            Properties = new OpenDialogProperty[] { OpenDialogProperty.openFile }
        };
        var files = await Electron.Dialog.ShowOpenDialogAsync(mainWindow, options);

        if (files.Length >= 1)
        {
            await _userImport.ImportAsync(files[0]);
        }
    }
}
