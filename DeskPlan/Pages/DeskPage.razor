@page "/desks"

@inject DeskPlan.Data.Services.DeskService _deskService
@inject DeskPlan.Data.Services.RoomService _RoomService
@inject DeskPlan.Data.Services.PlanningService _PlanningService

@if (isAdd || isEdit)
{
    <EditForm Model="@desk" OnValidSubmit="@HandleValidSubmit">
        <div class="modal fade show" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Desk</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>

                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <CustomValidator @ref="customValidator" />
                        <div class="form-group">
                            <label>Room</label>
                            <select @bind=desk.RoomId class="form-control" id="Room">
                                @if (rooms != null)
                                {
                                    foreach (Models.Room room in rooms)
                                    {
                                        <option value="@room.RoomId">@room.Name</option>
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => desk.RoomId)" />
                        </div>
                        <div class="form-group">
                            <label>Name</label>
                            <InputText @bind-Value=desk.Name class="form-control" id="Name" />
                            <ValidationMessage For="@(() => desk.Name)" />
                        </div>
                        <div class="form-group">
                            <label>Flex Desk?</label>
                            <InputCheckbox @bind-Value=desk.Flex class="form-control" id="Flex" />
                        </div>
                    </div>

                    <div class="modal-footer">
                        <input type="submit" class="btn btn-primary" value="Save" />
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    </EditForm>
}

@if (isDelete)
{
    <div class="modal fade show" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Desk?</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    <p>Delete Desk "@desk?.Name"?</p>
                    @if (NbrActivePlannings > 0)
                    {
                        <p>It is used in @NbrActivePlannings active @(NbrActivePlannings > 1?"plannings":"planning"). </p>
                    }
                </div>

                <div class="modal-footer">
                    <input type="submit" class="btn btn-danger" value="Confirm" @onclick="@(async () => await ModalDeleteDesk(@desk.DeskId, true))" />
                    <input type="submit" class="btn btn-primary" value="Cancel" @onclick="CloseModal" />
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@if (desks == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div class="pt-4">
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Flex?</th>
                    <th>Room</th>
                    <th>
                        <span class="pl-2">Edit</span>
                        <button class="btn pb-0 pt-0" @onclick="Add">
                            <span class="oi oi-plus" aria-hidden="true"></span>
                        </button>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var desk in desks)
                {
                    @if (desk != null)
                    {
                        <tr>
                            <td>@desk.Name</td>
                            @if (desk.Flex)
                            {
                                <td>Yes</td>
                            }
                            else
                            {
                                <td>No</td>
                            }
                            <td>@desk.Room.Name</td>
                            <td>
                                <button class="btn pb-0 pt-0" @onclick="@(async () => await ModalEditDesk(@desk.DeskId))">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                </button>
                                <button class="btn pb-0 pt-0" @onclick="@(async () => await ModalDeleteDesk(@desk.DeskId, false))">
                                    <span class="oi oi-circle-x" aria-hidden="true"></span>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@code {
    private CustomValidator customValidator;

    //Model
    private Models.Desk desk = new Models.Desk();
    private List<Models.Desk?> desks = new List<Models.Desk?>();
    private List<Models.Room> rooms = new List<Models.Room>();

    //Control
    private bool isAdd = false;
    private bool isEdit = false;
    private bool isDelete = false;

    //Error handling
    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; } = null!;

    //HTML
    private int NbrActivePlannings;

    #region UI Control
    private async void Add()
    {
        desk = new Models.Desk();
        rooms = await GetRooms();

        isAdd = true;
    }

    private void CloseModal()
    {
        isAdd = false;
        isEdit = false;
        isDelete = false;
    }
    #endregion

    #region display
    protected override async Task OnInitializedAsync()
    {
        await RefreshDesks();
    }

    private async Task<List<Models.Room>> GetRooms()
    {
        return await _RoomService.GetAllRooms();
    }

    private async Task RefreshDesks()
    {
        desks = await _deskService.GetAllDesksAsync();
    }
    #endregion

    #region CRUD
    private async void HandleValidSubmit()
    {
        customValidator.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        if (string.IsNullOrEmpty(desk.Name) || string.IsNullOrWhiteSpace(desk.Name))
        {
            errors.Add(nameof(desk.Name),
                new List<string>() { "A Desk's name is required." });
        }

        if (await DeskExists(desk.Name))
        {
            if ((isEdit && (await _deskService.GetByIdAsync(desk.DeskId)).Name != desk.Name) || isAdd)
            {
                errors.Add(nameof(desk.Name),
            new List<string>() { "A desk with this name already exists." });
            }
        }

        if (isAdd && await RoomIsFull())
        {
            errors.Add(nameof(desk.RoomId),
                new List<string>() { "Room is full..." });
        }

        if (errors.Count() > 0)
        {
            customValidator.DisplayErrors(errors);
        }
        else
        {
            AddOrEditDesk();
        }
    }

    private async Task<bool> RoomIsFull()
    {
        var currentDesks = (await _deskService.GetAllDesksForRoomAsync(desk.RoomId)).Count;
        var maxDesks = int.Parse(rooms.Where(r => r.RoomId == desk.RoomId).FirstOrDefault().MaxDesks);

        if (currentDesks >= maxDesks) return true;
        else return false;
    }

    private async Task<bool> DeskExists(string name)
    {
        var currentDesks = (await _deskService.GetAllDesksForRoomAsync(desk.RoomId));

        if (currentDesks.Where(d => d.Name == name).Any()) return true;
        else return false;
    }

    private async void AddOrEditDesk()
    {
        try
        {
            if (desk != null)
            {
                if (isAdd) await _deskService.InsertDeskAsync(desk);
                if (isEdit) await _deskService.UpdateDeskAsync(desk);
            }

            isEdit = isAdd = false;
            await RefreshDesks();
        }
        catch (Exception e)
        {
            CloseModal();
            ErrorComponent.ShowError(e.Message, e.StackTrace ?? "Please reload");
        }
    }

    protected async Task ModalEditDesk(int deskId)
    {
        try
        {
            desk = await _deskService.GetByIdAsync(deskId);
            rooms = await GetRooms();

            isEdit = true;
        }
        catch (Exception e)
        {
            CloseModal();
            ErrorComponent.ShowError(e.Message, e.StackTrace ?? "Please reload");
        }
    }

    protected async Task ModalDeleteDesk(int deskId, bool confirmed)
    {
        try
        {
            desk = await _deskService.GetByIdAsync(deskId);

            NbrActivePlannings = (await _PlanningService.GetAllActivePlanningsForDeskAsync(deskId)).Count;

            if (!confirmed) isDelete = true;
            else isDelete = false;

            if (desk != null && confirmed) await _deskService.DeleteDeskAsync(desk);

            await RefreshDesks();
        }
        catch (Exception e)
        {
            CloseModal();
            ErrorComponent.ShowError(e.Message, e.StackTrace ?? "Please reload");
        }
    }
    #endregion
}
